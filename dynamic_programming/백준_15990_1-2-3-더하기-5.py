'''
# 백준_15990_1, 2, 3 더하기 5. 실버 2. 풀이: 23.05.24

# How to
- 점화식
    - n번째 수에서 1을 더할 때, 2를 더할 때, 3을 더할 때
    - 같은 수를 두 번 이상 연속해서 사용하면 안되므로 이번에 더한 수는 제외하고 이전 dp값으로 계산
    - 각각 나머지 구해주는게 포인트!
dp[n][1] = (dp[n-1][2] + dp[n-1][3]) % 1_000_000_009
dp[n][2] = (dp[n-2][1] + dp[n-2][3]) % 1_000_000_009
dp[n][3] = (dp[n-3][1] + dp[n-3][2]) % 1_000_000_009

- 출력: sum(dp[n]) % 1_000_000_009

- 예시
n:
1, 2, 3, 4, 5, 6, 7

경우의 수:
1, 1, 3, 3, 4, 8, 9

dp:
[1, 0, 0], [0, 1, 0], [1, 1, 1], [2, 0, 1], [1, 2, 1], [3, 3, 2], [5, 2, 2]


# Review
- 점화식은 바로 구했는데, 시간초과.. 원인을 찾는데 90%를 허비했다.
- 다음날, 질문게시판에서 dp의 각 원소를 나누기해야한다는걸 알고나서, 성공
    - 매번 모든 원소의 나머지를 구해주지 않으면, 계산 과정에서 시간이 초과되는걸까?
- Top-Down은 재귀 깊이 제한을 늘려줘야하며, Bottom-Up 보다 훨씬 메모리도 크고 느리다. 
'''

# 1. Bottom-Up Code: dp 저장 없이, n-3, n-2, n-1을 매번 갱신
import sys
input = sys.stdin.readline

# n이 1, 2, 3 일 때, dp
a, b, c = [1, 0, 0], [0, 1, 0], [1, 1, 1]
# n을 1, 2, 3의 합으로 나타내는 방법의 수 저장
result = [0, 1, 1, 3]

# 먼저 입력을 받아서 그중 가장 큰값을 반복문의 최대범위로 해도 된다.
# 132 ms로 조금 더 빠르지만, 아래처럼 입력의 최대값으로 하는게 더 간편하다.
for _ in range(4, 100_001):
    
    # 계산에 필요한 n-3, n-2, n-1을 매번 갱신하여 메모리를 줄인다.
    # aa, bb, cc에서 나머지를 구하지 않고 dp에 저장하면? 시간초과
    aa = (c[1]+c[2]) % 1_000_000_009
    bb = (b[0]+b[2]) % 1_000_000_009
    cc = (a[0]+a[1]) % 1_000_000_009

    # 갱신과 result 없이 dp에 저장 후, 출력 시에 합의 나머지를 구한다면?: 58904	KB 192 ms
    a, b, c = b, c, [aa, bb, cc]
    result.append(sum(c) % 1_000_000_009)
    
for _ in range(int(input())):
    print(result[int(input())])

    
# 2. Top-Down Code
# dp에 저장해야하기 때문인지, 메모리도 크고 시간도 오래걸림: 60348 KB 436 ms
import sys
input = sys.stdin.readline
sys.setrecursionlimit(10**6)

dp = {1: [1, 0, 0], 2: [0, 1, 0], 3: [1, 1, 1]}

def solve(n):
    global dp
    if n in dp:
        return dp[n]
    t, a, b = solve(n-1)
    c, t, d = solve(n-2)
    e, f, t = solve(n-3)
    # 역시나 매번 dp의 각 원소의 나머지를 구하지 않고 dp에 저장하면? 시간초과
    dp[n] = [(a+b)%1_000_000_009, (c+d)%1_000_000_009, (e+f)%1_000_000_009]
    return dp[n]

for _ in range(int(input())):
    print(sum(solve(int(input()))) % 1_000_000_009)
    

'''
# Result
풀이 시간: 2시간
메모리: 35108 KB
시간: 136 ms
코드 길이: 384 B
'''